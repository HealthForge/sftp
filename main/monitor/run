#!/usr/bin/env python3

import kombu
import os
import shutil
import sys
import syslog
import time
from pathlib import Path
from traceback import format_exc

homes = Path("/home")
targets = Path(os.environ['TARGET_DIR'])

mq_url = os.environ.get('MESSAGE_BROKER_URL')
mq_exchange = os.environ.get('MESSAGE_EXCHANGE')
mq_exchange = mq_exchange and kombu.Exchange(mq_exchange)
mq_routing_key = os.environ.get('MESSAGE_ROUTING_KEY')

class User:
    def __init__(self, name):
        self.name = name

    @property
    def home(self): return homes / self.name

    @property
    def inbox(self): return self.home / 'inbox'

    @property
    def processed(self): return self.home / 'processed'

    @property
    def target(self): return targets / self.name

    def process(self):
        success = True
        for path in self.inbox.glob('**/*'):
            if path.is_file():
                success = self.process_file(path) and success
        return success

    def process_file(self, path):
        syslog.syslog('processing ' + str(path))
        try:
            name = path.name
            rel = path.relative_to(self.inbox)
            size = os.path.getsize(str(path))

            while True:
                dest = self.target / rel
                proc = self.processed / rel
                if not (dest.exists() or proc.exists()): break
                rel = rel.with_name('%s-%f' % (name, time.time()))

            if (rel.name != path.name): syslog.syslog(syslog.LOG_NOTICE, 'name collision: %s -> %s' % (path, rel.name))

            os.makedirs(str(dest.parent), exist_ok=True)
            os.makedirs(str(proc.parent), exist_ok=True)
            os.chown(str(proc.parent), os.getuid(), os.getgid())
            shutil.copy(str(path), str(dest))
            os.rename(str(path), str(proc))
        except Exception as e:
            syslog.syslog(syslog.LOG_ERR, 'failed to process %s: %s' % (path, e))
            return False
        else:
            try:
                self.send_msg(str(rel), size)
            except Exception as e:
                self.report_msg_err(e)
            return True

    def send_msg(self, path, size):
        if mq_url and mq_exchange:
            payload = {'user': self.name, 'path': path, 'size': size}
            with kombu.Connection(mq_url, transport_options = {'confirm_publish': True}) as conn:
                retry_policy = { 'max_retries': 5, 'errback': self.report_msg_err }
                conn.ensure_connection(**retry_policy)
                with conn.Producer() as prod:
                    prod.publish(
                        payload,
                        exchange = mq_exchange,
                        routing_key = mq_routing_key,
                        retry = True,
                        retry_policy = retry_policy
                    )

    def report_msg_err(self, exception, retry_interval = None):
        msg = 'message send failed: %s' % exception
        if retry_interval: msg += ', retrying in %d seconds' % retry_interval
        syslog.syslog(syslog.LOG_WARNING, msg)


syslog.openlog(ident="monitor", logoption=syslog.LOG_PID, facility=syslog.LOG_DAEMON)
syslog.syslog("monitor started")

if not (mq_url and mq_exchange):
    syslog.syslog(syslog.LOG_WARNING, "no message broker details provided, will not publish messages")


try:
    sleep_time = 60

    while True:
        success = True
        for entry in homes.iterdir():
            if entry.is_dir():
                user = User(entry.name)
                success = user.process() and success
        if success:
            sleep_time = 60
        else:
            if sleep_time < 3600: sleep_time += 60
            syslog.syslog(syslog.LOG_NOTICE, "error(s) occurred, backing off for %d seconds" % sleep_time)
        time.sleep(sleep_time)
except:
    syslog.syslog(syslog.LOG_CRIT, format_exc())
    sys.exit(1)
