#!/usr/bin/env python3

import os
import shutil
import sys
import syslog
from pathlib import Path
from time import sleep
from traceback import format_exc

homes = Path("/home")
targets = Path(os.environ['TARGET_DIR'])

class User:
    def __init__(self, name):
        self.name = name

    @property
    def home(self): return homes / self.name

    @property
    def inbox(self): return self.home / 'inbox'

    @property
    def processed(self): return self.home / 'processed'

    @property
    def target(self): return targets / self.name

    def process(self):
        success = True
        for path in self.inbox.glob('**/*'):
            if path.is_file():
                success = self.process_file(path) and success
        return success

    def process_file(self, path):
        syslog.syslog('processing ' + str(path))
        try:
            rel = path.relative_to(self.inbox)
            dest = self.target / rel
            proc = self.processed / rel
            os.makedirs(str(dest.parent), exist_ok=True)
            os.makedirs(str(proc.parent), exist_ok=True)
            os.chown(str(proc.parent), os.getuid(), os.getgid())
            shutil.copy(str(path), str(dest))
            os.rename(str(path), str(proc))
        except Exception as e:
            syslog.syslog(syslog.LOG_ERR, 'failed to process %s: %s' % (path, e))
            return False
        else:
            return True


syslog.openlog(ident="monitor", logoption=syslog.LOG_PID, facility=syslog.LOG_DAEMON)
syslog.syslog("monitor started")

try:
    sleep_time = 60

    while True:
        success = True
        for entry in homes.iterdir():
            if entry.is_dir():
                user = User(entry.name)
                success = user.process() and success
        if success:
            sleep_time = 60
        else:
            if sleep_time < 3600: sleep_time += 60
            syslog.syslog(syslog.LOG_NOTICE, "error(s) occurred, backing off for %d seconds" % sleep_time)
        sleep(sleep_time)
except:
    syslog.syslog(syslog.LOG_CRIT, format_exc())
    sys.exit(1)
